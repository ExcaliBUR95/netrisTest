{"ast":null,"code":"var _jsxFileName = \"/Users/alihanelderhanov/Desktop/testSkill/call-listing/src/components/VideoPlayer/ui/VideoPlayer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { EventList } from '../../EventList';\nimport styles from './VideoPlayer.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = _ref => {\n  _s();\n  let {\n    events\n  } = _ref;\n  const videoRef = useRef(null);\n  const [rectangles, setRectangles] = useState([]);\n  const handleVideoClick = () => {\n    if (videoRef.current && videoRef.current.paused) {\n      videoRef.current.play();\n    } else if (videoRef.current) {\n      videoRef.current.pause();\n    }\n  };\n  const handleEventClick = timestamp => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = timestamp / 1000;\n    }\n  };\n  const handleTimeUpdate = () => {\n    if (videoRef.current) {\n      const currentTime = videoRef.current.currentTime * 1000;\n\n      // Фильтрация событий, которые должны отображаться в текущий момент времени\n      const visibleRectangles = events.filter(event => currentTime >= event.timestamp && currentTime <= event.endTime);\n      setRectangles(visibleRectangles);\n    }\n  };\n  console.log(rectangles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.videoPlayerContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      src: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      onClick: handleVideoClick,\n      ref: videoRef,\n      onTimeUpdate: handleTimeUpdate,\n      className: styles.videoPlayer // Используем класс из CSS-модулей\n      ,\n      \"data-testid\": \"video-player\" // Добавляем атрибут data-testid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), rectangles.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.rectangle // Используем класс из CSS-модулей\n      ,\n      style: {\n        left: event.x,\n        top: event.y,\n        width: event.width,\n        height: event.height\n      },\n      \"data-testid\": `event-rectangle-${index}` // Добавляем атрибут data-testid с уникальным идентификатором\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(EventList, {\n      events: events,\n      onEventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"3jFvX3C21ZPGHMrNFpYTyg+I/Tk=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useRef","EventList","styles","jsxDEV","_jsxDEV","VideoPlayer","_ref","_s","events","videoRef","rectangles","setRectangles","handleVideoClick","current","paused","play","pause","handleEventClick","timestamp","currentTime","handleTimeUpdate","visibleRectangles","filter","event","endTime","console","log","className","videoPlayerContainer","children","src","onClick","ref","onTimeUpdate","videoPlayer","fileName","_jsxFileName","lineNumber","columnNumber","map","index","rectangle","style","left","x","top","y","width","height","onEventClick","_c","$RefreshReg$"],"sources":["/Users/alihanelderhanov/Desktop/testSkill/call-listing/src/components/VideoPlayer/ui/VideoPlayer.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { EventList } from '../../EventList';\nimport styles from './VideoPlayer.module.css';\n\ninterface Event {\n  timestamp: number;\n  endTime: number;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface VideoPlayerProps {\n  events: Event[];\n}\n\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({ events }) => {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const [rectangles, setRectangles] = useState<Event[]>([]);\n\n  const handleVideoClick = () => {\n    if (videoRef.current && videoRef.current.paused) {\n      videoRef.current.play();\n    } else if (videoRef.current) {\n      videoRef.current.pause();\n    }\n  };\n\n  const handleEventClick = (timestamp: number) => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = timestamp / 1000;\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    if (videoRef.current) {\n      const currentTime = videoRef.current.currentTime * 1000;\n\n      // Фильтрация событий, которые должны отображаться в текущий момент времени\n      const visibleRectangles = events.filter(\n        (event) => currentTime >= event.timestamp && currentTime <= event.endTime\n      );\n\n      setRectangles(visibleRectangles);\n    }\n  };\n \n  console.log(rectangles)\n  return (\n    <div className={styles.videoPlayerContainer}>\n      <video\n        src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n        onClick={handleVideoClick}\n        ref={videoRef}\n        onTimeUpdate={handleTimeUpdate}\n        className={styles.videoPlayer} // Используем класс из CSS-модулей\n        data-testid=\"video-player\" // Добавляем атрибут data-testid\n      />\n      {rectangles.map((event, index) => (\n        <div\n          key={index}\n          className={styles.rectangle} // Используем класс из CSS-модулей\n          style={{\n            left: event.x,\n            top: event.y,\n            width: event.width,\n            height: event.height,\n          }}\n          data-testid={`event-rectangle-${index}`} // Добавляем атрибут data-testid с уникальным идентификатором\n        />\n      ))}\n      <EventList events={events} onEventClick={handleEventClick} />\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}